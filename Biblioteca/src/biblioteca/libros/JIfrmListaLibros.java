/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biblioteca.libros;

import biblioteca.Sistema;
import biblioteca.modelos.Autores;
import biblioteca.modelos.Categorias;
import biblioteca.modelos.Libros;
import java.util.List;
import javax.swing.JDesktopPane;
import mojica.alexander.mvc.Item;
import mojica.alexander.mvc.MVCItemCellRenderer;
import mojica.alexander.mvc.TableModelo;

/**
 *
 * @author MekakuZero
 */
public class JIfrmListaLibros extends javax.swing.JInternalFrame {

    private static JIfrmListaLibros actual;
    
    private JIfrmLibro modificar_libros;
    
    // Informacion referente a los modales
    public static void ActualizarTabla(){
        actual.filtrarLibros();
    }
    
    private TableModelo modelo;
    
    // Informacion del filtrado
    private int id_autor;
    private int id_categoria;
    private String titulo;
    
    private JDesktopPane dp;
    
    /**
    * Creates new form JIfrmListaLibros
    **/
    
    public JIfrmListaLibros(JDesktopPane dp) {
        initComponents();
        
        this.dp = dp;
        
        this.id_autor = -1;
        this.id_categoria = -1;
        this.titulo = "";
        
        modelo = Libros.getModelo();
        this.tblLibros.setModel(modelo);
        
        restetItemCategoria();
        resetItemAutor();
        
        actual = this;
    }

    private void restetItemCategoria(){
        List<Categorias> categorias = Categorias.obtenerTodasCategorias();
        
        this.cmbCategoria.removeAllItems();
        
        this.cmbCategoria.addItem(Categorias.getDefault(-1, "Todas las categorias"));
        
        for(Categorias categoria : categorias)
            this.cmbCategoria.addItem(categoria);
        
        this.cmbCategoria.setRenderer(new MVCItemCellRenderer());
    }
    
    private void resetItemAutor(){
        List<Autores> autores = Autores.obtenerTodosAutores();
        
        this.cmbAutor.removeAllItems();
        
        this.cmbAutor.addItem(Autores.getDefault(-1, "Todos los autores"));
        this.cmbAutor.addItem(Autores.getDefault(0, "Anonimo"));
        
        for(Autores autor : autores)
            this.cmbAutor.addItem(autor);
        
        this.cmbAutor.setRenderer(new MVCItemCellRenderer());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFiltro = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        txtTitulo = new javax.swing.JTextField();
        lblCategoria = new javax.swing.JLabel();
        cmbAutor = new javax.swing.JComboBox();
        cmbCategoria = new javax.swing.JComboBox();
        lblAutor = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblLibros = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setTitle("Lista de libros");
        setToolTipText("");
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        pnlFiltro.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Filtros"));

        lblTitulo.setText("Titulo:");

        txtTitulo.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtTituloInputMethodTextChanged(evt);
            }
        });
        txtTitulo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTituloKeyReleased(evt);
            }
        });

        lblCategoria.setText("Categoria:");

        cmbAutor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAutorItemStateChanged(evt);
            }
        });

        cmbCategoria.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCategoriaItemStateChanged(evt);
            }
        });

        lblAutor.setText("Autor:");

        javax.swing.GroupLayout pnlFiltroLayout = new javax.swing.GroupLayout(pnlFiltro);
        pnlFiltro.setLayout(pnlFiltroLayout);
        pnlFiltroLayout.setHorizontalGroup(
            pnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFiltroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFiltroLayout.createSequentialGroup()
                        .addComponent(lblCategoria)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlFiltroLayout.createSequentialGroup()
                        .addGroup(pnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cmbCategoria, 0, 232, Short.MAX_VALUE)
                            .addComponent(txtTitulo)
                            .addComponent(lblTitulo, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlFiltroLayout.createSequentialGroup()
                                .addComponent(lblAutor)
                                .addGap(0, 227, Short.MAX_VALUE))
                            .addComponent(cmbAutor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        pnlFiltroLayout.setVerticalGroup(
            pnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFiltroLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(pnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAutor)
                    .addComponent(lblTitulo))
                .addGap(5, 5, 5)
                .addGroup(pnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(lblCategoria)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        getContentPane().add(pnlFiltro, java.awt.BorderLayout.PAGE_START);

        tblLibros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblLibros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLibrosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblLibros);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTituloInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtTituloInputMethodTextChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtTituloInputMethodTextChanged

    private void cmbAutorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAutorItemStateChanged
        // TODO add your handling code here:
        Autores autor = (Autores)this.cmbAutor.getSelectedItem();
        this.id_autor = autor.getId();
        filtrarLibros();
    }//GEN-LAST:event_cmbAutorItemStateChanged

    private void cmbCategoriaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCategoriaItemStateChanged
        // TODO add your handling code here:
        Categorias categoria = (Categorias)this.cmbCategoria.getSelectedItem();
        this.id_categoria = categoria.getId();
        filtrarLibros();
    }//GEN-LAST:event_cmbCategoriaItemStateChanged

    private void txtTituloKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTituloKeyReleased
        this.titulo = this.txtTitulo.getText().trim();
        filtrarLibros();
    }//GEN-LAST:event_txtTituloKeyReleased

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked

    private void tblLibrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLibrosMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() > 1) {
            Libros libro_modelo = (Libros)this.modelo.obtenerModelador(this.tblLibros.rowAtPoint(evt.getPoint()));
            
            if (modificar_libros != null) modificar_libros.dispose();
            
            modificar_libros = new JIfrmLibro(libro_modelo);
            this.dp.add(modificar_libros);
            modificar_libros.show();
        }
    }//GEN-LAST:event_tblLibrosMouseClicked

    public void filtrarLibros(){
        this.modelo = Libros.getModelo(this.id_autor, this.id_categoria, this.titulo);
        this.tblLibros.setModel(this.modelo);
    }

    @Override
    public void dispose() {
        super.dispose(); //To change body of generated methods, choose Tools | Templates.
        Sistema.cancelarExistenciaFrmBucarLibro();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbAutor;
    private javax.swing.JComboBox cmbCategoria;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAutor;
    private javax.swing.JLabel lblCategoria;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnlFiltro;
    private javax.swing.JTable tblLibros;
    private javax.swing.JTextField txtTitulo;
    // End of variables declaration//GEN-END:variables
}
